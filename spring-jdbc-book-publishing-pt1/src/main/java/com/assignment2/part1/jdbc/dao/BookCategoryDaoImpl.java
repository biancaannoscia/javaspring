package com.assignment2.part1.jdbc.dao;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.sql.DataSource;

import org.springframework.beans.factory.InitializingBean;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;

import com.assignment2.part1.jdbc.crud.DeleteBook;
import com.assignment2.part1.jdbc.crud.FindAllBooks;
import com.assignment2.part1.jdbc.crud.FindAllCategories;
import com.assignment2.part1.jdbc.crud.InsertBook;
import com.assignment2.part1.jdbc.crud.SelectBooksByCategoryName;
import com.assignment2.part1.jdbc.crud.UpdateBook;
import com.assignment2.part1.jdbc.domain.Book;
import com.assignment2.part1.jdbc.domain.Category;

public class BookCategoryDaoImpl implements BookCategoryDao {
	/* This class contains methods that interact with the PUBLISHINGDB database, or more specifically,
	 * operations on the Book and Category tables such as creating, reading, updating and 
	 * deleting records. It contains  all of the data access for information regarding Book and Category. 
	*/
	
	private FindAllCategories findAllCategories;
	private FindAllBooks findAllBooks;
	private SelectBooksByCategoryName selectBooksByCategoryName;
	private InsertBook insertBook;
	private DeleteBook deleteBook;
	private UpdateBook updateBook;
	
	/* taken from slide: You can delegate to Spring managing the database connection for you by 
	 * providing a bean that implements javax.sql.DataSource. After a DataSource bean 
	 * is created it provisions and manages connections.
	 * */
	
	private DataSource dataSource;

	public List<Category> findAllCategories() {
		return findAllCategories.execute();
	}

	public List<Book> findAllBooks() {
		return findAllBooks.execute();
	}

	//use paramMap to map the argument being passed
	public List<Book> findAllBooksByCategoryName(String name) {
		Map<String, Object> paramMap = new HashMap<>();
		paramMap.put("name", name);
		return selectBooksByCategoryName.executeByNamedParam(paramMap);
	}

	//use KeyHolder for retrieving the autogenerated ID that would normally get automatically inserted as part
	//of an insert statement
	public void insertBook(Book book) {
		Map<String, Object> paramMap = new HashMap<>();
		paramMap.put("category_id", book.getCategory_id());
		paramMap.put("title", book.getTitle());
		paramMap.put("price", book.getPrice());
		paramMap.put("isbn", book.getIsbn());
		KeyHolder keyHolder = new GeneratedKeyHolder();
		insertBook.updateByNamedParam(paramMap, keyHolder);
		book.setId(keyHolder.getKey().longValue());
		
	}

	public void updateBook(Long bookID) {
		//jdbcTemplate.update("update book set title = 'Kurt Vonnegut' where id = ?", bookID);
		updateBook.update(bookID);
	}

	public void deleteBook(Long bookID) {
		Map<String, Object> paramMap = new HashMap<>();
		paramMap.put("id", bookID);
		deleteBook.updateByNamedParam(paramMap);
		
	}
	
	
	public void setDataSource(DataSource dataSource) {
		this.dataSource = dataSource;
		this.findAllCategories = new FindAllCategories(dataSource);
		this.findAllBooks = new FindAllBooks(dataSource);
		this.selectBooksByCategoryName = new SelectBooksByCategoryName(dataSource);
		this.insertBook = new InsertBook(dataSource);
		this.deleteBook = new DeleteBook(dataSource);
		this.updateBook = new UpdateBook(dataSource);
	}

	public DataSource getDataSource() {
		return dataSource;
	}


}

